{"version":3,"sources":["App.module.css","components/Header/Header.module.css","components/MainPage/MainPage.module.css","components/Board/Board.module.css","components/UI/Input/Input.module.css","components/NextPlayer/NextPlayer.module.css","components/UI/Title/Title.module.css","components/Winner/Winner.module.css","components/Board/Board.js","components/UI/Input/Input.js","components/UI/Title/Title.js","components/UI/Button/Button.js","components/MainPage/MainPage.js","components/Winner/Winner.js","components/UI/Text/Text.js","components/Header/Header.js","components/NextPlayer/NextPlayer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Board","data","handleClickOnCell","className","classes","map","cell","idx","key","Cell","onClick","Input","id","handleChange","name","Player","type","placeholder","onChange","event","Title","title","Button","MainPage","handleStartGame","SubTitle","Start","Winner","value","Text","counter","Header","player1","player2","winsPlayer1","winsPlayer2","totalGames","notWins","Wins","NotWins","NextPlayer","player","App","state","mainPage","nextPlayer","isGameOver","winner","Array","fill","combinationOfWin","getWinner","combinations","symbol","i","length","indexElement","indexOf","splice","set","Set","size","from","join","setState","handleNewGame","target","this","Content","Game","Status","NewGame","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f07e3b86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1yEIW\",\"Content\":\"App_Content__3s-JP\",\"Game\":\"App_Game__1jmQb\",\"Status\":\"App_Status__2S3t4\",\"NewGame\":\"App_NewGame__13Svv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__257bb\",\"Wins\":\"Header_Wins__1hMLK\",\"NotWins\":\"Header_NotWins__26Cii\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainPage\":\"MainPage_MainPage__1QSOl\",\"SubTitle\":\"MainPage_SubTitle__2WvXG\",\"Start\":\"MainPage_Start__2K0FP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2SOVE\",\"Cell\":\"Board_Cell__8i_2w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2m5yw\",\"Player\":\"Input_Player__1CJ0N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NextPlayer\":\"NextPlayer_NextPlayer__12XAc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"Title_Title__3_u7g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Winner\":\"Winner_Winner__2dUT1\"};","import React from 'react';\r\nimport classes from './Board.module.css';\r\n\r\nexport const Board = ({ data, handleClickOnCell }) => {\r\n    return (\r\n        <ul className={classes.Board}>\r\n            { \r\n                data.map((cell, idx) => {\r\n                    return (\r\n                        <li \r\n                            key={idx}\r\n                            className={classes.Cell}\r\n                            onClick={() => handleClickOnCell(idx)}\r\n                            >\r\n                                { cell }\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n    )\r\n}","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\n\r\nexport const Input = ({ id, handleChange, name }) => {\r\n    return (\r\n        <>\r\n            <label className={classes.Player}>{ name } (default name { id })</label>\r\n\r\n            <input \r\n                id={ id }\r\n                type='text' \r\n                placeholder='Input your name' \r\n                className={classes.Input}\r\n                onChange={event => handleChange(event)}\r\n            />\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport classes from './Title.module.css';\r\n\r\nexport const Title = ({ title }) => {\r\n    return (\r\n    <h1 className={classes.Title}>{ title }</h1>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const Button = ({ onClick, name, className }) => {\r\n    return (\r\n        <button \r\n            className={className}\r\n            onClick={() => onClick()}\r\n        >\r\n            { name }\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport { Input } from '../UI/Input/Input';\r\nimport classes from './MainPage.module.css';\r\nimport { Title } from '../UI/Title/Title';\r\nimport { Button } from '../UI/Button/Button';\r\n\r\nexport const MainPage = ({ handleStartGame, handleChange }) => {\r\n    return (\r\n        <div className={classes.MainPage}>\r\n            <Title title={'Tic Tac Toe'}/>\r\n            <p className={classes.SubTitle}>(If you don't input player name, one will be default)</p>\r\n\r\n            <Input \r\n                id='X'\r\n                name='Player 1'\r\n                handleChange={handleChange}\r\n            />\r\n\r\n            <Input \r\n                id='O'\r\n                name='Player 2'\r\n                handleChange={handleChange}\r\n            />\r\n\r\n            <Button onClick={handleStartGame} name={'Start'} className={classes.Start}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport classes from './Winner.module.css';\r\n\r\nexport const Winner = ({ value }) => {\r\n    return (\r\n        <div className={classes.Winner}>\r\n            Winner { value }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const Text = ({ title, className, counter }) => {\r\n    return (\r\n        <p><strong>{ title }: </strong><span className={ className }>{ counter }</span> time(s)</p>\r\n    )\r\n}","import React from 'react';\r\nimport classes from './Header.module.css';\r\nimport { Text } from '../UI/Text/Text';\r\n\r\nexport const Header = ({ player1, player2, winsPlayer1, winsPlayer2, totalGames, notWins }) => {\r\n    return (\r\n        <div className={classes.Header}>\r\n            <div>\r\n                <Text title={'Number of games played'} className={classes.Wins} counter={totalGames}/>\r\n                <Text title={'Not wins'} className={classes.NotWins} counter={notWins}/>\r\n            </div>\r\n\r\n            <Text title={player1} className={classes.Wins} counter={winsPlayer1}/>\r\n            <Text title={player2} className={classes.Wins} counter={winsPlayer2}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport classes from './NextPlayer.module.css';\r\n\r\nexport const NextPlayer = ({ player }) => {\r\n    return (\r\n        <div className={classes.NextPlayer}>\r\n            <p className={classes.Text}>Next player: <strong>{ player }</strong></p>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport { Board } from './components/Board/Board';\nimport { MainPage } from './components/MainPage/MainPage';\nimport { Winner } from './components/Winner/Winner';\nimport { Header } from './components/Header/Header';\nimport { NextPlayer } from './components/NextPlayer/NextPlayer';\nimport { Title } from './components/UI/Title/Title';\nimport { Button } from './components/UI/Button/Button';\n\n\nexport default class App extends Component {\n\n  state = {\n    mainPage: true,\n    player1: 'X',\n    player2: 'O',\n    nextPlayer: true,\n    winsPlayer1: 0,\n    winsPlayer2: 0,\n    notWins: 0,\n    totalGames: 0,\n    counter: 0,\n    isGameOver: false,\n    winner: '',\n    data: Array(9).fill(null),\n    combinationOfWin: [\n      [0, 1, 2],\n      [3, 4, 5], \n      [6, 7, 8], \n      [0, 3, 6], \n      [1, 4, 7], \n      [2, 5, 8], \n      [0, 4, 8], \n      [2, 4, 6]\n    ]\n  } \n\n  getWinner = (combinations, symbol, idx) => {\n    for (let i = 0; i < combinations.length; i++) {\n      let indexElement = combinations[i].indexOf(idx);\n      if (indexElement !== -1) combinations[i].splice(indexElement, 1, symbol);\n      let set = new Set(combinations[i]);\n      if (set.size === 1) return Array.from(set).join();\n    }\n  }\n  \n  notWins = () => {\n    if (this.state.counter === 8) {\n      this.setState({ \n        winner: '-',\n        isGameOver: true,\n        notWins: this.state.notWins + 1,\n      })\n    };\n  }\n\n  handleClickOnCell = idx => {\n    let { counter, data, combinationOfWin, isGameOver } = this.state;\n    let x, o;\n\n    if (isGameOver) return; // game over\n\n    this.notWins();\n\n    if (counter % 2 === 0) {\n      if (data[idx] === 'X' || data[idx] === 'O') return; // click on the same cell\n      data.splice(idx, 1, 'X'); // change data game\n      x = this.getWinner(combinationOfWin, 'X', idx); // winner X\n      if (x === 'X') this.setState({ winner: 'X', isGameOver: true, winsPlayer1: this.state.winsPlayer1 + 1 }); // game over\n      this.setState({ counter: this.state.counter + 1, nextPlayer: !this.state.nextPlayer }); // change next player\n    }\n    else {\n      if (data[idx] === 'X' || data[idx] === 'O') return; // click on the same cell\n      data.splice(idx, 1, 'O'); // change data game\n      o = this.getWinner(combinationOfWin, 'O', idx); // winner O\n      if (o === 'O') this.setState({ winner: 'O', isGameOver: true, winsPlayer2: this.state.winsPlayer2 + 1 }); // game over\n      this.setState({ counter: this.state.counter + 1, nextPlayer: !this.state.nextPlayer}); // change next player\n    }\n  }\n\n  handleNewGame = () => {\n    this.setState({ \n      totalGames: this.state.totalGames + 1,\n      isGameOver: false,\n      counter: 0,\n      nextPlayer: true,\n      data: Array(9).fill(null),\n      combinationOfWin: [\n        [0, 1, 2],\n        [3, 4, 5], \n        [6, 7, 8], \n        [0, 3, 6], \n        [1, 4, 7], \n        [2, 5, 8], \n        [0, 4, 8], \n        [2, 4, 6]\n      ]\n    })\n  }\n\n  handleStartGame = () => {\n    this.setState({ mainPage: false });\n  }\n\n  handleChange = event => {\n    if (event.target.id === 'X')\n      this.setState({ player1: event.target.value });\n    if (event.target.id === 'O')\n      this.setState({ player2: event.target.value });\n  }\n  \n  render() {\n     return (\n      <div className={classes.App}>\n        {\n          this.state.mainPage \n          ? <MainPage \n              handleStartGame={this.handleStartGame}\n              handleChange={this.handleChange}\n            />\n          : <>\n              <Header \n                player1={this.state.player1} \n                player2={this.state.player2}\n                winsPlayer1={this.state.winsPlayer1}\n                winsPlayer2={this.state.winsPlayer2}\n                totalGames={this.state.totalGames}\n                notWins={this.state.notWins}\n              />\n\n              <div className={classes.Content}>\n                <div className={classes.Game}>\n                  <Title title={'Game board'}/>\n                  <Board \n                    data={this.state.data}\n                    handleClickOnCell={this.handleClickOnCell}\n                  />\n                </div>\n\n                <div className={classes.Status}> \n                  <h3>Status game:</h3>\n                  {/* button new game */}\n                  <Button onClick={this.handleNewGame} name={'new game'} className={classes.NewGame}/> \n                  { this.state.nextPlayer ? <NextPlayer player={this.state.player1}/> :<NextPlayer player={this.state.player2}/> }\n                  { this.state.isGameOver ? <Winner value={ this.state.winner }/> : null }\n                </div>\n              </div>\n            </>\n        }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}